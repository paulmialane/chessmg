use crate::bitboard::Bitboard;
use num_derive::FromPrimitive;
use num_traits::FromPrimitive;

#[derive(Copy, Clone, PartialEq)]
pub enum Color {
    White,
    Black,
}

#[derive(Copy, Clone, PartialEq)]
pub enum Kind {
    Pawn,
    Knight,
    Bishop,
    Rook,
    Queen,
    King,
}

// Te chosen layout is:
//
// 8 56 57 58 59 60 61 62 63
// 7 48 49 50 51 52 53 54 55
// 6 40 41 42 43 44 45 46 47
// 5 32 33 34 35 36 37 38 39
// 4 24 25 26 27 28 29 30 31
// 3 16 17 18 19 20 21 22 23
// 2 08 09 10 11 12 13 14 15
// 1 00 01 02 03 04 05 06 07
//   a  b  c  d  e  f  g  h
#[allow(dead_code)]
#[derive(FromPrimitive, Clone, Copy, Debug, PartialEq)]
pub enum Square {
    A1 = 0,
    B1,
    C1,
    D1,
    E1,
    F1,
    G1,
    H1,

    A2,
    B2,
    C2,
    D2,
    E2,
    F2,
    G2,
    H2,

    A3,
    B3,
    C3,
    D3,
    E3,
    F3,
    G3,
    H3,

    A4,
    B4,
    C4,
    D4,
    E4,
    F4,
    G4,
    H4,

    A5,
    B5,
    C5,
    D5,
    E5,
    F5,
    G5,
    H5,

    A6,
    B6,
    C6,
    D6,
    E6,
    F6,
    G6,
    H6,

    A7,
    B7,
    C7,
    D7,
    E7,
    F7,
    G7,
    H7,

    A8,
    B8,
    C8,
    D8,
    E8,
    F8,
    G8,
    H8,
}

#[allow(dead_code)]
pub const MASK_RANK: [Bitboard; 8] = [
    Bitboard(0xFF),
    Bitboard(0xFF << 8),
    Bitboard(0xFF << 16),
    Bitboard(0xFF << 24),
    Bitboard(0xFF << 32),
    Bitboard(0xFF << 40),
    Bitboard(0xFF << 48),
    Bitboard(0xFF << 56),
];

#[allow(dead_code)]
pub const MASK_FILE: [Bitboard; 8] = [
    Bitboard(0x0101_0101_0101_0101),
    Bitboard(0x0202_0202_0202_0202),
    Bitboard(0x0404_0404_0404_0404),
    Bitboard(0x0808_0808_0808_0808),
    Bitboard(0x1010_1010_1010_1010),
    Bitboard(0x2020_2020_2020_2020),
    Bitboard(0x4040_4040_4040_4040),
    Bitboard(0x8080_8080_8080_8080),
];

#[allow(dead_code)]
pub const CLEAR_RANK: [Bitboard; 8] = [
    Bitboard(0xFFFF_FFFF_FFFF_FF00),
    Bitboard(0xFFFF_FFFF_FFFF_00FF),
    Bitboard(0xFFFF_FFFF_FF00_FFFF),
    Bitboard(0xFFFF_FFFF_00FF_FFFF),
    Bitboard(0xFFFF_FF00_FFFF_FFFF),
    Bitboard(0xFFFF_00FF_FFFF_FFFF),
    Bitboard(0xFF00_FFFF_FFFF_FFFF),
    Bitboard(0x00FF_FFFF_FFFF_FFFF),
];

#[allow(dead_code)]
pub const CLEAR_FILE: [Bitboard; 8] = [
    Bitboard(0xFEFE_FEFE_FEFE_FEFE),
    Bitboard(0xFDFD_FDFD_FDFD_FDFD),
    Bitboard(0xFBFB_FBFB_FBFB_FBFB),
    Bitboard(0xF7F7_F7F7_F7F7_F7F7),
    Bitboard(0xEFEF_EFEF_EFEF_EFEF),
    Bitboard(0xDFDF_DFDF_DFDF_DFDF),
    Bitboard(0xBFBF_BFBF_BFBF_BFBF),
    Bitboard(0x7F7F_7F7F_7F7F_7F7F),
];

#[allow(dead_code)]
pub const NORTH_RAY: [Bitboard; 64] = [
    Bitboard(0x101_0101_0101_0100),
    Bitboard(0x202_0202_0202_0200),
    Bitboard(0x404_0404_0404_0400),
    Bitboard(0x808_0808_0808_0800),
    Bitboard(0x1010_1010_1010_1000),
    Bitboard(0x2020_2020_2020_2000),
    Bitboard(0x4040_4040_4040_4000),
    Bitboard(0x8080_8080_8080_8000),
    Bitboard(0x101_0101_0101_0000),
    Bitboard(0x202_0202_0202_0000),
    Bitboard(0x404_0404_0404_0000),
    Bitboard(0x808_0808_0808_0000),
    Bitboard(0x1010_1010_1010_0000),
    Bitboard(0x2020_2020_2020_0000),
    Bitboard(0x4040_4040_4040_0000),
    Bitboard(0x8080_8080_8080_0000),
    Bitboard(0x101_0101_0100_0000),
    Bitboard(0x202_0202_0200_0000),
    Bitboard(0x404_0404_0400_0000),
    Bitboard(0x808_0808_0800_0000),
    Bitboard(0x1010_1010_1000_0000),
    Bitboard(0x2020_2020_2000_0000),
    Bitboard(0x4040_4040_4000_0000),
    Bitboard(0x8080_8080_8000_0000),
    Bitboard(0x101_0101_0000_0000),
    Bitboard(0x202_0202_0000_0000),
    Bitboard(0x404_0404_0000_0000),
    Bitboard(0x808_0808_0000_0000),
    Bitboard(0x1010_1010_0000_0000),
    Bitboard(0x2020_2020_0000_0000),
    Bitboard(0x4040_4040_0000_0000),
    Bitboard(0x8080_8080_0000_0000),
    Bitboard(0x101_0100_0000_0000),
    Bitboard(0x202_0200_0000_0000),
    Bitboard(0x404_0400_0000_0000),
    Bitboard(0x808_0800_0000_0000),
    Bitboard(0x1010_1000_0000_0000),
    Bitboard(0x2020_2000_0000_0000),
    Bitboard(0x4040_4000_0000_0000),
    Bitboard(0x8080_8000_0000_0000),
    Bitboard(0x101_0000_0000_0000),
    Bitboard(0x202_0000_0000_0000),
    Bitboard(0x404_0000_0000_0000),
    Bitboard(0x808_0000_0000_0000),
    Bitboard(0x1010_0000_0000_0000),
    Bitboard(0x2020_0000_0000_0000),
    Bitboard(0x4040_0000_0000_0000),
    Bitboard(0x8080_0000_0000_0000),
    Bitboard(0x100_0000_0000_0000),
    Bitboard(0x200_0000_0000_0000),
    Bitboard(0x400_0000_0000_0000),
    Bitboard(0x800_0000_0000_0000),
    Bitboard(0x1000_0000_0000_0000),
    Bitboard(0x2000_0000_0000_0000),
    Bitboard(0x4000_0000_0000_0000),
    Bitboard(0x8000_0000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
];

#[allow(dead_code)]
pub const SOUTH_RAY: [Bitboard; 64] = [
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x1),
    Bitboard(0x2),
    Bitboard(0x4),
    Bitboard(0x8),
    Bitboard(0x10),
    Bitboard(0x20),
    Bitboard(0x40),
    Bitboard(0x80),
    Bitboard(0x101),
    Bitboard(0x202),
    Bitboard(0x404),
    Bitboard(0x808),
    Bitboard(0x1010),
    Bitboard(0x2020),
    Bitboard(0x4040),
    Bitboard(0x8080),
    Bitboard(0x1_0101),
    Bitboard(0x2_0202),
    Bitboard(0x4_0404),
    Bitboard(0x8_0808),
    Bitboard(0x10_1010),
    Bitboard(0x20_2020),
    Bitboard(0x40_4040),
    Bitboard(0x80_8080),
    Bitboard(0x10_10101),
    Bitboard(0x20_20202),
    Bitboard(0x40_40404),
    Bitboard(0x80_80808),
    Bitboard(0x101_01010),
    Bitboard(0x202_02020),
    Bitboard(0x404_04040),
    Bitboard(0x808_08080),
    Bitboard(0x1_0101_0101),
    Bitboard(0x2_0202_0202),
    Bitboard(0x4_0404_0404),
    Bitboard(0x8_0808_0808),
    Bitboard(0x10_1010_1010),
    Bitboard(0x20_2020_2020),
    Bitboard(0x40_4040_4040),
    Bitboard(0x80_8080_8080),
    Bitboard(0x101_0101_0101),
    Bitboard(0x202_0202_0202),
    Bitboard(0x404_0404_0404),
    Bitboard(0x808_0808_0808),
    Bitboard(0x1010_1010_1010),
    Bitboard(0x2020_2020_2020),
    Bitboard(0x4040_4040_4040),
    Bitboard(0x8080_8080_8080),
    Bitboard(0x1_0101_0101_0101),
    Bitboard(0x2_0202_0202_0202),
    Bitboard(0x4_0404_0404_0404),
    Bitboard(0x8_0808_0808_0808),
    Bitboard(0x10_1010_1010_1010),
    Bitboard(0x20_2020_2020_2020),
    Bitboard(0x40_4040_4040_4040),
    Bitboard(0x80_8080_8080_8080),
];

#[allow(dead_code)]
pub const EAST_RAY: [Bitboard; 64] = [
    Bitboard(0xfe),
    Bitboard(0xfc),
    Bitboard(0xf8),
    Bitboard(0xf0),
    Bitboard(0xe0),
    Bitboard(0xc0),
    Bitboard(0x80),
    Bitboard(0x0),
    Bitboard(0xfe00),
    Bitboard(0xfc00),
    Bitboard(0xf800),
    Bitboard(0xf000),
    Bitboard(0xe000),
    Bitboard(0xc000),
    Bitboard(0x8000),
    Bitboard(0x0),
    Bitboard(0xfe_0000),
    Bitboard(0xfc_0000),
    Bitboard(0xf8_0000),
    Bitboard(0xf0_0000),
    Bitboard(0xe0_0000),
    Bitboard(0xc0_0000),
    Bitboard(0x80_0000),
    Bitboard(0x0),
    Bitboard(0xfe00_0000),
    Bitboard(0xfc00_0000),
    Bitboard(0xf800_0000),
    Bitboard(0xf000_0000),
    Bitboard(0xe000_0000),
    Bitboard(0xc000_0000),
    Bitboard(0x8000_0000),
    Bitboard(0x0),
    Bitboard(0xfe_0000_0000),
    Bitboard(0xfc_0000_0000),
    Bitboard(0xf8_0000_0000),
    Bitboard(0xf0_0000_0000),
    Bitboard(0xe0_0000_0000),
    Bitboard(0xc0_0000_0000),
    Bitboard(0x80_0000_0000),
    Bitboard(0x0),
    Bitboard(0xfe00_0000_0000),
    Bitboard(0xfc00_0000_0000),
    Bitboard(0xf800_0000_0000),
    Bitboard(0xf000_0000_0000),
    Bitboard(0xe000_0000_0000),
    Bitboard(0xc000_0000_0000),
    Bitboard(0x8000_0000_0000),
    Bitboard(0x0),
    Bitboard(0xfe_0000_0000_0000),
    Bitboard(0xfc_0000_0000_0000),
    Bitboard(0xf8_0000_0000_0000),
    Bitboard(0xf0_0000_0000_0000),
    Bitboard(0xe0_0000_0000_0000),
    Bitboard(0xc0_0000_0000_0000),
    Bitboard(0x80_0000_0000_0000),
    Bitboard(0x0),
    Bitboard(0xfe00_0000_0000_0000),
    Bitboard(0xfc00_0000_0000_0000),
    Bitboard(0xf800_0000_0000_0000),
    Bitboard(0xf000_0000_0000_0000),
    Bitboard(0xe000_0000_0000_0000),
    Bitboard(0xc000_0000_0000_0000),
    Bitboard(0x8000_0000_0000_0000),
    Bitboard(0x0),
];

#[allow(dead_code)]
pub const WEST_RAY: [Bitboard; 64] = [
    Bitboard(0x0),
    Bitboard(0x1),
    Bitboard(0x3),
    Bitboard(0x7),
    Bitboard(0xf),
    Bitboard(0x1f),
    Bitboard(0x3f),
    Bitboard(0x7f),
    Bitboard(0x0),
    Bitboard(0x100),
    Bitboard(0x300),
    Bitboard(0x700),
    Bitboard(0xf00),
    Bitboard(0x1f00),
    Bitboard(0x3f00),
    Bitboard(0x7f00),
    Bitboard(0x0),
    Bitboard(0x1_0000),
    Bitboard(0x3_0000),
    Bitboard(0x7_0000),
    Bitboard(0xf_0000),
    Bitboard(0x1f_0000),
    Bitboard(0x3f_0000),
    Bitboard(0x7f_0000),
    Bitboard(0x0),
    Bitboard(0x100_0000),
    Bitboard(0x300_0000),
    Bitboard(0x700_0000),
    Bitboard(0xf00_0000),
    Bitboard(0x1f00_0000),
    Bitboard(0x3f00_0000),
    Bitboard(0x7f00_0000),
    Bitboard(0x0),
    Bitboard(0x1_0000_0000),
    Bitboard(0x3_0000_0000),
    Bitboard(0x7_0000_0000),
    Bitboard(0xf_0000_0000),
    Bitboard(0x1f_0000_0000),
    Bitboard(0x3f_0000_0000),
    Bitboard(0x7f_0000_0000),
    Bitboard(0x0),
    Bitboard(0x100_0000_0000),
    Bitboard(0x300_0000_0000),
    Bitboard(0x700_0000_0000),
    Bitboard(0xf00_0000_0000),
    Bitboard(0x1f00_0000_0000),
    Bitboard(0x3f00_0000_0000),
    Bitboard(0x7f00_0000_0000),
    Bitboard(0x0),
    Bitboard(0x1_0000_0000_0000),
    Bitboard(0x3_0000_0000_0000),
    Bitboard(0x7_0000_0000_0000),
    Bitboard(0xf_0000_0000_0000),
    Bitboard(0x1f_0000_0000_0000),
    Bitboard(0x3f_0000_0000_0000),
    Bitboard(0x7f_0000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x100_0000_0000_0000),
    Bitboard(0x300_0000_0000_0000),
    Bitboard(0x700_0000_0000_0000),
    Bitboard(0xf00_0000_0000_0000),
    Bitboard(0x1f00_0000_0000_0000),
    Bitboard(0x3f00_0000_0000_0000),
    Bitboard(0x7f00_0000_0000_0000),
];

#[allow(dead_code)]
pub const NORTH_EAST_RAY: [Bitboard; 64] = [
    Bitboard(0x8040_2010_0804_0200),
    Bitboard(0x80_4020_1008_0400),
    Bitboard(0x8040_2010_0800),
    Bitboard(0x80_4020_1000),
    Bitboard(0x8040_2000),
    Bitboard(0x80_4000),
    Bitboard(0x8000),
    Bitboard(0x0),
    Bitboard(0x4020_1008_0402_0000),
    Bitboard(0x8040_2010_0804_0000),
    Bitboard(0x80_4020_1008_0000),
    Bitboard(0x8040_2010_0000),
    Bitboard(0x80_4020_0000),
    Bitboard(0x_8040_0000),
    Bitboard(0x80_0000),
    Bitboard(0x0),
    Bitboard(0x2010_0804_0200_0000),
    Bitboard(0x4020_1008_0400_0000),
    Bitboard(0x8040_2010_0800_0000),
    Bitboard(0x80_4020_1000_0000),
    Bitboard(0x8040_2000_0000),
    Bitboard(0x80_4000_0000),
    Bitboard(0x8000_0000),
    Bitboard(0x0),
    Bitboard(0x1008_0402_0000_0000),
    Bitboard(0x2010_0804_0000_0000),
    Bitboard(0x4020_1008_0000_0000),
    Bitboard(0x8040_2010_0000_0000),
    Bitboard(0x80_4020_0000_0000),
    Bitboard(0x8040_0000_0000),
    Bitboard(0x80_0000_0000),
    Bitboard(0x0),
    Bitboard(0x804_0200_0000_0000),
    Bitboard(0x1008_0400_0000_0000),
    Bitboard(0x2010_0800_0000_0000),
    Bitboard(0x4020_1000_0000_0000),
    Bitboard(0x8040_2000_0000_0000),
    Bitboard(0x80_4000_0000_0000),
    Bitboard(0x8000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x402_0000_0000_0000),
    Bitboard(0x804_0000_0000_0000),
    Bitboard(0x1008_0000_0000_0000),
    Bitboard(0x2010_0000_0000_0000),
    Bitboard(0x4020_0000_0000_0000),
    Bitboard(0x8040_0000_0000_0000),
    Bitboard(0x80_0000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x200_0000_0000_0000),
    Bitboard(0x400_0000_0000_0000),
    Bitboard(0x800_0000_0000_0000),
    Bitboard(0x1000_0000_0000_0000),
    Bitboard(0x2000_0000_0000_0000),
    Bitboard(0x4000_0000_0000_0000),
    Bitboard(0x8000_0000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
];

#[allow(dead_code)]
pub const NORTH_WEST_RAY: [Bitboard; 64] = [
    Bitboard(0x0),
    Bitboard(0x100),
    Bitboard(0x1_0200),
    Bitboard(0x102_0400),
    Bitboard(0x1_0204_0800),
    Bitboard(0x102_0408_1000),
    Bitboard(0x1_0204_0810_2000),
    Bitboard(0x102_0408_1020_4000),
    Bitboard(0x0),
    Bitboard(0x1_0000),
    Bitboard(0x102_0000),
    Bitboard(0x1_0204_0000),
    Bitboard(0x102_0408_0000),
    Bitboard(0x1_0204_0810_0000),
    Bitboard(0x102_0408_1020_0000),
    Bitboard(0x204_0810_2040_0000),
    Bitboard(0x0),
    Bitboard(0x100_0000),
    Bitboard(0x1_0200_0000),
    Bitboard(0x102_0400_0000),
    Bitboard(0x1_0204_0800_0000),
    Bitboard(0x102_0408_1000_0000),
    Bitboard(0x204_0810_2000_0000),
    Bitboard(0x408_1020_4000_0000),
    Bitboard(0x0),
    Bitboard(0x1_0000_0000),
    Bitboard(0x102_0000_0000),
    Bitboard(0x1_0204_0000_0000),
    Bitboard(0x102_0408_0000_0000),
    Bitboard(0x204_0810_0000_0000),
    Bitboard(0x408_1020_0000_0000),
    Bitboard(0x810_2040_0000_0000),
    Bitboard(0x0),
    Bitboard(0x100_0000_0000),
    Bitboard(0x1_0200_0000_0000),
    Bitboard(0x102_0400_0000_0000),
    Bitboard(0x204_0800_0000_0000),
    Bitboard(0x408_1000_0000_0000),
    Bitboard(0x810_2000_0000_0000),
    Bitboard(0x1020_4000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x1_0000_0000_0000),
    Bitboard(0x102_0000_0000_0000),
    Bitboard(0x204_0000_0000_0000),
    Bitboard(0x408_0000_0000_0000),
    Bitboard(0x810_0000_0000_0000),
    Bitboard(0x1020_0000_0000_0000),
    Bitboard(0x2040_0000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x100_0000_0000_0000),
    Bitboard(0x200_0000_0000_0000),
    Bitboard(0x400_0000_0000_0000),
    Bitboard(0x800_0000_0000_0000),
    Bitboard(0x1000_0000_0000_0000),
    Bitboard(0x2000_0000_0000_0000),
    Bitboard(0x4000_0000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
];

#[allow(dead_code)]
pub const SOUTH_EAST_RAY: [Bitboard; 64] = [
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x2),
    Bitboard(0x4),
    Bitboard(0x8),
    Bitboard(0x10),
    Bitboard(0x20),
    Bitboard(0x40),
    Bitboard(0x80),
    Bitboard(0x0),
    Bitboard(0x204),
    Bitboard(0x408),
    Bitboard(0x810),
    Bitboard(0x1020),
    Bitboard(0x2040),
    Bitboard(0x4080),
    Bitboard(0x8000),
    Bitboard(0x0),
    Bitboard(0x2_0408),
    Bitboard(0x4_0810),
    Bitboard(0x8_1020),
    Bitboard(0x10_2040),
    Bitboard(0x20_4080),
    Bitboard(0x40_8000),
    Bitboard(0x80_0000),
    Bitboard(0x0),
    Bitboard(0x204_0810),
    Bitboard(0x408_1020),
    Bitboard(0x810_2040),
    Bitboard(0x1020_4080),
    Bitboard(0x2040_8000),
    Bitboard(0x4080_0000),
    Bitboard(0x8000_0000),
    Bitboard(0x0),
    Bitboard(0x2_0408_1020),
    Bitboard(0x4_0810_2040),
    Bitboard(0x8_1020_4080),
    Bitboard(0x10_2040_8000),
    Bitboard(0x20_4080_0000),
    Bitboard(0x40_8000_0000),
    Bitboard(0x80_0000_0000),
    Bitboard(0x0),
    Bitboard(0x204_0810_2040),
    Bitboard(0x408_1020_4080),
    Bitboard(0x810_2040_8000),
    Bitboard(0x1020_4080_0000),
    Bitboard(0x2040_8000_0000),
    Bitboard(0x4080_0000_0000),
    Bitboard(0x8000_0000_0000),
    Bitboard(0x0),
    Bitboard(0x2_0408_1020_4080),
    Bitboard(0x4_0810_2040_8000),
    Bitboard(0x8_1020_4080_0000),
    Bitboard(0x10_2040_8000_0000),
    Bitboard(0x20_4080_0000_0000),
    Bitboard(0x40_8000_0000_0000),
    Bitboard(0x80_0000_0000_0000),
    Bitboard(0x0),
];

#[allow(dead_code)]
pub const SOUTH_WEST_RAY: [Bitboard; 64] = [
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x0),
    Bitboard(0x1),
    Bitboard(0x2),
    Bitboard(0x4),
    Bitboard(0x8),
    Bitboard(0x10),
    Bitboard(0x20),
    Bitboard(0x40),
    Bitboard(0x0),
    Bitboard(0x100),
    Bitboard(0x201),
    Bitboard(0x402),
    Bitboard(0x804),
    Bitboard(0x1008),
    Bitboard(0x2010),
    Bitboard(0x4020),
    Bitboard(0x0),
    Bitboard(0x1_0000),
    Bitboard(0x2_0100),
    Bitboard(0x4_0201),
    Bitboard(0x8_0402),
    Bitboard(0x10_0804),
    Bitboard(0x20_1008),
    Bitboard(0x40_2010),
    Bitboard(0x0),
    Bitboard(0x100_0000),
    Bitboard(0x201_0000),
    Bitboard(0x402_0100),
    Bitboard(0x804_0201),
    Bitboard(0x1008_0402),
    Bitboard(0x2010_0804),
    Bitboard(0x4020_1008),
    Bitboard(0x0),
    Bitboard(0x1_0000_0000),
    Bitboard(0x2_0100_0000),
    Bitboard(0x4_0201_0000),
    Bitboard(0x8_0402_0100),
    Bitboard(0x10_0804_0201),
    Bitboard(0x20_1008_0402),
    Bitboard(0x40_2010_0804),
    Bitboard(0x0),
    Bitboard(0x100_0000_0000),
    Bitboard(0x201_0000_0000),
    Bitboard(0x402_0100_0000),
    Bitboard(0x804_0201_0000),
    Bitboard(0x1008_0402_0100),
    Bitboard(0x2010_0804_0201),
    Bitboard(0x4020_1008_0402),
    Bitboard(0x0),
    Bitboard(0x1_0000_0000_0000),
    Bitboard(0x2_0100_0000_0000),
    Bitboard(0x4_0201_0000_0000),
    Bitboard(0x8_0402_0100_0000),
    Bitboard(0x10_0804_0201_0000),
    Bitboard(0x20_1008_0402_0100),
    Bitboard(0x40_2010_0804_0201),
];

impl Square {
    pub fn from_u8(integer: u8) -> Self {
        match FromPrimitive::from_u8(integer) {
            Some(square) => square,
            None => todo!("Should return an error"),
        }
    }

    pub fn from_usize(integer: usize) -> Self {
        match FromPrimitive::from_usize(integer) {
            Some(square) => square,
            None => todo!("{integer}"),
        }
    }

    #[allow(clippy::should_implement_trait)]
    pub fn from_str(s: &str) -> Self {
        match s {
            "a1" => Square::A1,
            "b1" => Square::B1,
            "c1" => Square::C1,
            "d1" => Square::D1,
            "e1" => Square::E1,
            "f1" => Square::F1,
            "g1" => Square::G1,
            "h1" => Square::H1,

            "a2" => Square::A2,
            "b2" => Square::B2,
            "c2" => Square::C2,
            "d2" => Square::D2,
            "e2" => Square::E2,
            "f2" => Square::F2,
            "g2" => Square::G2,
            "h2" => Square::H2,

            "a3" => Square::A3,
            "b3" => Square::B3,
            "c3" => Square::C3,
            "d3" => Square::D3,
            "e3" => Square::E3,
            "f3" => Square::F3,
            "g3" => Square::G3,
            "h3" => Square::H3,

            "a4" => Square::A4,
            "b4" => Square::B4,
            "c4" => Square::C4,
            "d4" => Square::D4,
            "e4" => Square::E4,
            "f4" => Square::F4,
            "g4" => Square::G4,
            "h4" => Square::H4,

            "a5" => Square::A5,
            "b5" => Square::B5,
            "c5" => Square::C5,
            "d5" => Square::D5,
            "e5" => Square::E5,
            "f5" => Square::F5,
            "g5" => Square::G5,
            "h5" => Square::H5,

            "a6" => Square::A6,
            "b6" => Square::B6,
            "c6" => Square::C6,
            "d6" => Square::D6,
            "e6" => Square::E6,
            "f6" => Square::F6,
            "g6" => Square::G6,
            "h6" => Square::H6,

            "a7" => Square::A7,
            "b7" => Square::B7,
            "c7" => Square::C7,
            "d7" => Square::D7,
            "e7" => Square::E7,
            "f7" => Square::F7,
            "g7" => Square::G7,
            "h7" => Square::H7,

            "a8" => Square::A8,
            "b8" => Square::B8,
            "c8" => Square::C8,
            "d8" => Square::D8,
            "e8" => Square::E8,
            "f8" => Square::F8,
            "g8" => Square::G8,
            "h8" => Square::H8,

            _ => panic!(),
        }
    }
}

#[allow(dead_code)]
#[allow(clippy::struct_excessive_bools)]
#[derive(Clone)]
pub struct Casteling {
    // This truct tells whether the king of a given color can
    // castle:
    // true => can castle,
    // false => can't castle,
    pub white_kingside: bool,
    pub white_queenside: bool,
    pub black_kingside: bool,
    pub black_queenside: bool,
}

impl Default for Casteling {
    fn default() -> Self {
        Casteling {
            white_kingside: true,
            white_queenside: true,
            black_kingside: true,
            black_queenside: true,
        }
    }
}

#[allow(dead_code)]
pub fn square_mask(square: Square) -> Bitboard {
    Bitboard(1 << square as u8)
}
